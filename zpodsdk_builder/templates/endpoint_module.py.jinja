from http import HTTPStatus
from typing import Any, Dict, List, Optional, Union, cast

import httpx

from ...client import AuthenticatedClient, Client
from ...types import Response, UNSET
from ... import errors

{% for relative in endpoint.relative_imports %}
{{ relative }}
{% endfor %}

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params,
    arguments, client, kwargs, parse_response, docstring, body_to_kwarg %}

{% set return_string = endpoint.response_type() %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "Any" %}

class {{endpoint.name|replace("_", " ")|title|replace(" ", "")}}:
    def __init__(self, client: Union[AuthenticatedClient, Client]) -> None:
        self.client = client

    def _get_kwargs(
        self, {{ arguments(endpoint, include_client=False) | indent(8) }}
    ) -> Dict[str, Any]:
        {{ header_params(endpoint) | indent(8) }}

        {{ cookie_params(endpoint) | indent(8) }}

        {{ query_params(endpoint) | indent(8) }}

        _kwargs: Dict[str, Any] = {
            "method": "{{ endpoint.method }}",
            {% if endpoint.path_parameters %}
            "url": "{{ endpoint.path }}".format(
            {%- for parameter in endpoint.path_parameters.values() -%}
            {{parameter.name}}={{parameter.python_name}},
            {%- endfor -%}
            ),
            {% else %}
            "url": "{{ endpoint.path }}",
            {% endif %}
            {% if endpoint.query_parameters %}
            "params": params,
            {% endif %}
            {% if endpoint.cookie_parameters %}
            "cookies": cookies,
            {% endif %}
        }

    {% if endpoint.bodies | length > 1 %}
    {% for body in endpoint.bodies %}
        if isinstance(body, {{body.prop.get_type_string() }}):
            {% set destination = "_" + body.body_type + "_body" %}
            {{ body_to_kwarg(body, destination) | indent(12) }}
            _kwargs["{{ body.body_type.value }}"] = {{ destination }}
            headers["Content-Type"] = "{{ body.content_type }}"
    {% endfor %}
    {% elif endpoint.bodies | length == 1 %}
    {% set body = endpoint.bodies[0] %}
        {{ body_to_kwarg(body, "_body") | indent(8) }}
        _kwargs["{{ body.body_type.value }}"] = _body
        {% if body.content_type != "multipart/form-data" %}{# Need httpx to set the boundary automatically #}
        headers["Content-Type"] = "{{ body.content_type }}"
        {% endif %}
    {% endif %}

    {% if endpoint.header_parameters or endpoint.bodies | length > 0 %}
        _kwargs["headers"] = headers
    {% endif %}
        return _kwargs


    def _parse_response(self, *, response: httpx.Response) -> Optional[{{ return_string }}]:
        {% for response in endpoint.responses %}
        {% if response.status_code.name == "UNPROCESSABLE_ENTITY" %}
        if (
            response.status_code == HTTPStatus.{{ response.status_code.name }}
            and not self.client.raise_on_unexpected_status
        ):
        {% else %}
        if response.status_code == HTTPStatus.{{ response.status_code.name }}:
        {% endif %}
            {% if parsed_responses %}{% import "property_templates/" + response.prop.template as prop_template %}
            {% if prop_template.construct %}
            {{ prop_template.construct(response.prop, response.source.attribute) | indent(12) }}
            {% elif response.source.return_type == response.prop.get_type_string()  %}
            {{ response.prop.python_name }} = {{ response.source.attribute }}
            {% else %}
            {{ response.prop.python_name }} = cast({{ response.prop.get_type_string() }}, {{ response.source.attribute }})
            {% endif %}
            return {{ response.prop.python_name }}
            {% else %}
            return None
            {% endif %}
        {% endfor %}
        if self.client.raise_on_unexpected_status:
            raise errors.UnexpectedStatus(response.status_code, response.content)
        else:
            return None


    def _build_response(self, *, response: httpx.Response) -> Response[{{ return_string }}]:
        return Response(
            status_code=HTTPStatus(response.status_code),
            content=response.content,
            headers=response.headers,
            parsed=self._parse_response(response=response),
        )



    def sync_detailed(
        self, {{ arguments(endpoint, include_client=False) | indent(8) }}
    ) -> Response[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=true) | indent(8) }}

        kwargs = self._get_kwargs(
            {{ kwargs(endpoint, include_client=False) | indent(12)}}
        )

        response = self.client.get_httpx_client().request(
            **kwargs,
        )

        return self._build_response(response=response)

    {% if parsed_responses %}
    def sync(
        self, {{ arguments(endpoint, include_client=False) | indent(8) }}
    ) -> Optional[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=false) | indent(8) }}

        return self.sync_detailed(
            {{ kwargs(endpoint, include_client=False) | indent(12) }}
        ).parsed
    {% endif %}

    async def asyncio_detailed(
        self, {{ arguments(endpoint, include_client=False) | indent(8) }}
    ) -> Response[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=true) | indent(8) }}

        kwargs = self._get_kwargs(
            {{ kwargs(endpoint, include_client=False) | indent(12) }}
        )

        response = await self.client.get_async_httpx_client().request(
            **kwargs
        )

        return self._build_response(response=response)

    {% if parsed_responses %}
    async def asyncio(
        self, {{ arguments(endpoint, include_client=False) | indent(8) }}
    ) -> Optional[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=false) | indent(8) }}

        return (await self.asyncio_detailed(
            {{ kwargs(endpoint, include_client=False) | indent(12)}}
        )).parsed
    {% endif %}
