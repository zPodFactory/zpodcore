from http import HTTPStatus
from typing import Any, Dict, List, Optional, Union, cast

import httpx

from ...client import Client
from ...types import Response, UNSET
from ... import errors

{% for relative in endpoint.relative_imports %}
{{ relative }}
{% endfor %}

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params, json_body, multipart_body,
    arguments, client, kwargs, parse_response, docstring %}

{% set return_string = endpoint.response_type() %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "Any" %}

class {{endpoint.name|replace("_", " ")|title|replace(" ", "")}}:
    def __init__(self, client: Client) -> None:
        self.client = client

    def _get_kwargs(
        self, {{ arguments(endpoint) | indent(8) }}
    ) -> Dict[str, Any]:
        url = "{}{{ endpoint.path }}".format(
            self.client.base_url
            {%- for parameter in endpoint.path_parameters.values() -%}
            ,{{parameter.name}}={{parameter.python_name}}
            {%- endfor -%}
        )

        headers: Dict[str, str] = self.client.get_headers()
        cookies: Dict[str, Any] = self.client.get_cookies()

        {{ header_params(endpoint) | indent(8) }}

        {{ cookie_params(endpoint) | indent(8) }}

        {{ query_params(endpoint) | indent(8) }}

        {{ json_body(endpoint) | indent(8) }}

        {{ multipart_body(endpoint) | indent(8) }}

        return {
            "method": "{{ endpoint.method }}",
            "url": url,
            "headers": headers,
            "cookies": cookies,
            "timeout": self.client.get_timeout(),
            "follow_redirects": self.client.follow_redirects,
            {% if endpoint.form_body %}
            "data": form_data.to_dict(),
            {% elif endpoint.multipart_body %}
            "files": {{ "multipart_" + endpoint.multipart_body.python_name }},
            {% elif endpoint.json_body %}
            "json": {{ "json_" + endpoint.json_body.python_name }},
            {% endif %}
            {% if endpoint.query_parameters %}
            "params": params,
            {% endif %}
        }


    def _parse_response(self, *, response: httpx.Response) -> Optional  [{{ return_string }}]:
        {% for response in endpoint.responses %}
        if response.status_code == HTTPStatus.{{ response.status_code.name }}:
            {% if parsed_responses %}{% import "property_templates/" + response.prop.template as prop_template %}
            {% if prop_template.construct %}
            {{ prop_template.construct(response.prop, response.source) | indent(12) }}
            {% else %}
            {{ response.prop.python_name }} = cast({{ response.prop.get_type_string() }}, {{ response.source }})
            {% endif %}
            return {{ response.prop.python_name }}
            {% else %}
            return None
            {% endif %}
        {% endfor %}
        if self.client.raise_on_unexpected_status:
            raise errors.UnexpectedStatus(response.status_code, response.content)
        else:
            return None


    def _build_response(self, *, response: httpx.Response) -> Response[{{ return_string }}]:
        return Response(
            status_code=HTTPStatus(response.status_code),
            content=response.content,
            headers=response.headers,
            parsed=self._parse_response(response=response),
        )



    def sync_detailed(
        self, {{ arguments(endpoint) | indent(8) }}
    ) -> Response[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=true) | indent(8) }}

        kwargs = self._get_kwargs(
            {{ kwargs(endpoint) | indent(12) }}
        )

        response = httpx.request(
            verify=self.client.verify_ssl,
            **kwargs,
        )

        return self._build_response(response=response)

    {% if parsed_responses %}
    def sync(
        self, {{ arguments(endpoint) | indent(8) }}
    ) -> Optional[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=false) | indent(8) }}

        return self.sync_detailed(
            {{ kwargs(endpoint) | indent(12) }}
        ).parsed
    {% endif %}

    async def asyncio_detailed(
        self, {{ arguments(endpoint) | indent(8) }}
    ) -> Response[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=true) | indent(8) }}

        kwargs = self._get_kwargs(
            {{ kwargs(endpoint) | indent(12) }}
        )

        async with httpx.AsyncClient(verify=self.client.verify_ssl) as _client:
            response = await _client.request(
                **kwargs
            )

        return self._build_response(response=response)

    {% if parsed_responses %}
    async def asyncio(
        self, {{ arguments(endpoint) | indent(8) }}
    ) -> Optional[{{ return_string }}]:
        {{ docstring(endpoint, return_string, is_detailed=false) | indent(8) }}

        return (await self.asyncio_detailed(
            {{ kwargs(endpoint) | indent(12)}}
        )).parsed
    {% endif %}
