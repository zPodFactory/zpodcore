# Define Versions
ARG POETRY_VENV=/opt/venv
ARG POETRY_VERSION=1.7.1
ARG PS_VERSION=7.4.1
ARG PS_INSTALL_VERSION=7-4-1
ARG POWERCLI_VERSION=13.2.1.22851661
ARG POWERNSX_VERSION=3.0.1192
ARG POWERVCF_VERSION=2.4.1.1000
ARG GOVC_VERSION=0.34.2
ARG VCC_VERSION=1.2.0-beta


#################################################
# Base
FROM python:3.12.1-slim-bookworm as base

ARG POETRY_VENV

ENV PATH="${POETRY_VENV}/bin:${PATH}"



#################################################
# Builder
FROM base as builder

ARG INSTALL_DEV=false
ARG POETRY_VERSION
ARG POETRY_VENV
ARG PS_VERSION
ARG PS_INSTALL_VERSION
ARG TARGETPLATFORM
ARG GOVC_VERSION
ARG VCC_VERSION

WORKDIR /tmp

RUN apt-get update \
    && apt-get install -y \
    curl \
    gcc \
    git \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY ./zpodengine/pyproject.toml ./zpodengine/poetry.lock* /tmp/
RUN python3 -m venv $POETRY_VENV \
    && . $POETRY_VENV/bin/activate \
    && $POETRY_VENV/bin/pip install --no-cache-dir -U pip setuptools \
    && $POETRY_VENV/bin/pip install --no-cache-dir poetry==${POETRY_VERSION} \
    && pip install --upgrade git+https://github.com/vmware/vsphere-automation-sdk-python@v8.0.1.0 \
    && poetry install --no-interaction --no-cache --no-root $(test "$INSTALL_DEV" != "true" && echo "--without dev")

RUN echo "I'm building for $TARGETPLATFORM"

# Download powershell
RUN export ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
    "linux/amd64")   echo "x64"   ;; \
    "linux/arm64")   echo "arm64" ;; \
    *)               echo ""      ;; esac) \
    && echo "ARCH=$ARCH" \
    && curl -o /tmp/powershell.tar.gz -L https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/powershell-${PS_VERSION}-linux-${ARCH}.tar.gz

# Download govc (FIXME: vcc will break on arm64, no binaries built)
RUN export ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
    "linux/amd64")   echo "x86_64";; \
    "linux/arm64")   echo "arm64" ;; \
    *)               echo ""      ;; esac) \
    && echo "ARCH=$ARCH" \
    && curl -o /tmp/govc.tar.gz -L https://github.com/vmware/govmomi/releases/download/v${GOVC_VERSION}/govc_Linux_${ARCH}.tar.gz \
    && curl -o /usr/local/bin/vcc -L https://github.com/vmware-labs/vmware-customer-connect-cli/releases/download/v${VCC_VERSION}/vcc-linux-v${VCC_VERSION}

# Define the folder where we will be installing PowerShell
ENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION

# Create the install folder
RUN mkdir -p ${PS_INSTALL_FOLDER}

# Decompress the Powershell tar.gz
RUN tar zxf /tmp/powershell.tar.gz -C ${PS_INSTALL_FOLDER}

# Decompress govc/vcc and make executable
RUN tar zxf /tmp/govc.tar.gz -C /usr/local/bin/ \
    && chmod +x /usr/local/bin/govc \
    && chmod +x /usr/local/bin/vcc

#################################################
# MAIN
FROM base as main
ARG PS_INSTALL_VERSION
ARG POWERCLI_VERSION
ARG POWERNSX_VERSION
ARG POWERVCF_VERSION
ARG POETRY_VENV

# Copy python packages
COPY --from=builder ${POETRY_VENV} ${POETRY_VENV}

# Copy other packages
COPY --from=builder ["/usr/local/bin/govc", "/usr/local/bin/govc"]
COPY --from=builder ["/usr/local/bin/vcc", "/usr/local/bin/vcc"]
COPY --from=builder ["/opt/microsoft/powershell", "/opt/microsoft/powershell"]

ENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION \
    # Define ENVs for Localization/Globalization
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    # set a fixed location for the Module analysis cache
    PSModuleAnalysisCachePath=/var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache \
    POWERSHELL_DISTRIBUTION_CHANNEL=PSDocker-Debian-11

# Install dependencies and clean up
RUN apt-get update \
    && apt-get install -y \
    wget \
    curl \
    # less is required for help in powershell
    less \
    # required to setup the locale
    locales \
    # required for SSL
    ca-certificates \
    gss-ntlmssp \
    libicu72 \
    libssl3 \
    libc6 \
    libgcc1 \
    libgssapi-krb5-2 \
    libstdc++6 \
    zlib1g \
    iputils-ping \
    p7zip-full \
    # PowerShell remoting over SSH dependencies
    openssh-client \
    # Postgres libs
    libpq5 \
    && apt-get dist-upgrade -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    # enable en_US.UTF-8 locale
    && sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen \
    # generate locale
    && locale-gen && update-locale

# Give all user execute permissions and remove write permissions for others
RUN chmod a+x,o-w ${PS_INSTALL_FOLDER}/pwsh \
    # Create the pwsh symbolic link that points to powershell
    && ln -s ${PS_INSTALL_FOLDER}/pwsh /usr/bin/pwsh \
    # intialize powershell module cache
    # and disable telemetry
    && export POWERSHELL_TELEMETRY_OPTOUT=1 \
    && pwsh \
    -NoLogo \
    -NoProfile \
    -Command " \
    \$ErrorActionPreference = 'Stop' ; \
    \$ProgressPreference = 'SilentlyContinue' ; \
    while(!(Test-Path -Path \$env:PSModuleAnalysisCachePath)) {  \
    Write-Host "'Waiting for $env:PSModuleAnalysisCachePath'" ; \
    Start-Sleep -Seconds 6 ; \
    }"

SHELL [ "pwsh", "-command" ]
RUN Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
RUN Install-Module -Scope AllUsers VMware.PowerCLI -RequiredVersion ${POWERCLI_VERSION}
RUN Install-Module -Scope AllUsers PowerNSX -RequiredVersion ${POWERNSX_VERSION}
RUN Install-Module -Scope AllUsers PowerVCF -RequiredVersion ${POWERVCF_VERSION}
RUN Install-Module -Scope AllUsers Subnet -RequiredVersion 1.0.14

# On by default to suppress nagging. Set to $false if you don't want to help us make PowerCLI better.
RUN Set-PowerCLIConfiguration -ParticipateInCeip $true -Confirm:$false
RUN Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -confirm:$false

# Remove those "Write-Progress" that try to make a nice ascii animation bar which causes problems when no TTY
SHELL ["/bin/sh", "-c"]
RUN sed -i '/Write-Progress/d' /usr/local/share/powershell/Modules/PowerNSX/${POWERNSX_VERSION}/PowerNSX.psm1

WORKDIR /zpodcore/src/zpodengine
ENV PYTHONPATH=/zpodcore/src

CMD ["tail", "-f", "/dev/null"]



#################################################
# DEV
FROM main as dev



#################################################
# PROD
FROM main as production
COPY ./zpodengine/src/zpodengine /zpodcore/src/zpodengine
COPY ./zpodcommon/src/zpodcommon /zpodcore/src/zpodcommon
